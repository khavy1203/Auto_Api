const { Telegraf, Extra } = require('telegraf');
import { checkTokenTelegram, getTokenTelegram, checkTokenInLocalNLTB, getTokenInLocalNLTB } from '../middleware/tokenAction.js';
const moment = require('moment');
const path = require('path');

import botTelegramService from '../service/botTelegramService.js';
const fs = require('fs');

require('dotenv').config();

const botTelegram = () => {

  const helpMessage = `
    C√°c c√∫ ph√°p s·ª≠ d·ª•ng bot ( C√ÅC C√ö PH√ÅP VUI L√íNG KH√îNG D·∫§U ) : 
      /dat tenhocvien ho·∫∑c m√£h·ªçcvi√™n (Ki·ªÉm tra DAT h·ªçc vi√™n)
      /phien tenhocvien ho·∫∑c m√£h·ªçcvi√™n (Ki·ªÉm tra Phi√™n h·ªçc vi√™n)
      /matphien m√£h·ªçcvi√™n ( Nh·∫±m ki·∫øm tra b·ªã "M·∫§T PHI√äN" - ƒë·ªëi chi·∫øu d·ªØ li·ªáu phi√™n gi·ªØa m√°y DAT v√† tr√™n T·ªïng C·ª•c, ƒë·ªÉ x·ª≠ l√Ω cho c√°c th·∫ßy c√≥ th·ªÉ t√¨m ki·∫øm ƒë∆∞·ª£c phi√™n b·ªã m·∫•t, ho·∫∑c phi√™n load qu√° l√¢u tr√™n 12h)
      /indat bi·ªÉns·ªëxe (L√†m gi·∫•y ph√©p t·∫≠p l√°i. V√≠ d·ª• : /indat 77A12345 m·∫∑t ƒë·ªãnh l√† 1 th√°ng, mu·ªën l·∫•y d·ªØ li·ªáu trong 2,3 th√¨ c√°ch ra v√† th√™m s·ªë 2 ho·∫∑c 3 th√°ng . V√≠ d·ª• : /indat 77A12345 2 )
      /timkhoa t√™nkho√° (Ki·ªÉm tra t√™n kho√° h·ªçc ƒë·ªÉ ƒë·∫©y xu·ªëng xe cho ch√≠nh x√°c. V√≠ d·ª•: /timkhoa 127 )
      /daykhoa t√™nkho√° bi·ªÉns·ªëxe (ƒê·∫©y kho√° h·ªçc xu·ªëng xe. V√≠ d·ª• ƒë·∫©y kho√° 127 xu·ªëng xe 77A12345: /daykhoa 127 77A12345 )
    `;


  let isFetchingData = true;

  const bot = new Telegraf(process.env.BOT_TOKEN);
  const arrLocalCheck = [
    '/matphien',
    '/indat',
    '/daykhoa',
    '/timkhoa'
  ]
  async function sleep() {
    return new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 2000);
    });
  }

  try {
    function isNumberString(str) {
      // S·ª≠ d·ª•ng bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ ki·ªÉm tra chu·ªói
      // ^\d+$: B·∫Øt ƒë·∫ßu (^) v√† k·∫øt th√∫c ($) v·ªõi m·ªôt ho·∫∑c nhi·ªÅu s·ªë (\d+)
      return /^\d+$/.test(str) || !str;
    }

    bot.use(async (ctx, next) => {
      // ctx.reply('U use bot');
      try {
        console.log("bot ƒë√£ ho·∫°t ƒë·ªông")
        console.log("check ctx chat id", ctx.chat.id)
        if (isFetchingData) {
          // if (ctx.chat.id != process.env.id_groupNLTB) {
          //   await ctx.replyWithHTML('Vui l√≤ng kh√¥ng truy v·∫•n d·ªØ li·ªáu ho·∫∑c nh·∫Øn ri√™ng tr√™n tin nh·∫Øn ri√™ng c·ªßa bot, vui l√≤ng truy v·∫•n tr√™n group ch√≠nh th·ª©c : <a href="https://t.me/+NR_DldQ80ak0MTRl">DAT_NLTB</a> . Mu·ªën truy v·∫•n ri√™ng tr√™n bot, vui l√≤ng nh·∫Øn tin tr·ª±c ti·∫øp cho em Vy (0987980417) ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn nh·∫Øn tin ri√™ng tr√™n bot ü§ñü§ñ', { disable_web_page_preview: true })
          //   return
          // }

          if (ctx.update.message && ctx.update.message.new_chat_members) {
            for (let member of ctx.update.message.new_chat_members) {
              await ctx.reply(`Ch√†o m·ª´ng th·∫ßy ${member.first_name} ƒë·∫øn v·ªõi nh√≥m! \n ${helpMessage}`)
              return
            }
          }

          let input = ctx.message.text.split(" ");
          const commandCheck = input.shift();

          if (arrLocalCheck.includes(commandCheck.toLowerCase())) {

            const mhv = input[0]?.trim();
            console.log("mhv", mhv);
            if (!mhv) {
              await ctx.reply(helpMessage);
              isFetchingData = true;
              return;
            }

            const res = await checkTokenInLocalNLTB();
            console.log('check res', res)
            if (res.EC == 0) {
              ctx.state.tokenLocalNLTB = process.env.tokenLocalNLTB;
            } else {
              const getTokenLocalNLTB = await getTokenInLocalNLTB()
              if (getTokenLocalNLTB.EC == 0) {
                ctx.state.tokenLocalNLTB = getTokenLocalNLTB.DT;

              } else {
                await ctx.reply('L·ªói l·∫•y token ·ªü localNLTB, vui l√≤ng th·ª≠ l·∫°i sau');
                isFetchingData = true;
                return;
              }
            }
            await next(ctx);
          } else {
            const checkData = await checkTokenTelegram();
            if (+checkData?.EC != 0 || !checkData?.DT?.length) {
              const data = await getTokenTelegram();
              console.log('check data in getToken', data)
              if (+data.EC != 0 || !data?.DT?.id_token) {
                await ctx.reply('L·ªói l·∫•y token, vui l√≤ng th·ª≠ l·∫°i sau');
                isFetchingData = true;
                return;
              } else {
                ctx.state.tokenNLTB = data?.DT?.id_token;
              }
            }
            ctx.state.tokenNLTB = process.env.tokenNLTB;
            await next(ctx);
          }

        }
      } catch (e) {
        console.log("check error", e)
        await ctx.reply('L·ªói server bot, h√£y li√™n h·ªá Kh·∫£ Vy ƒë·ªÉ ƒë∆∞·ª£c fix s·ªõm nh·∫•t');
        isFetchingData = true;
        return;
      }
    })

    bot.command('help', async (ctx) => {
      if (isFetchingData) {
        isFetchingData = false;
        await ctx.reply(helpMessage);
        isFetchingData = true;
        return;
      }
      isFetchingData = true;
      return;
    })

    bot.command('dat', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          const name = input.join(" ");
          console.log("name", name);
          if (!name) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          //call api get student info
          let tokenNLTB = ctx?.state?.tokenNLTB;
          const res = await botTelegramService.getInfoStudent(tokenNLTB, name);
          Promise.all([res]);
          console.log('check data', res);
          if (+res?.EC != 0) {
            await ctx.reply('L·ªói l·∫•y token, vui l√≤ng th·ª≠ l·∫°i sau');
            isFetchingData = true;
            return;
          }
          let i = 1;
          if (res.EC == 0 && res.DT?.length > 0) {
            for (const e of res.DT) {
              const row = `<i>STT:</i><code style="color: red;"> <b style="color:red;">${i++}</b></code>\n<i>H·ªç v√† T√™n:</i> <b>${e?.studentName}</b>\n<i>M√£ h·ªçc vi√™n:</i> <b>${e?.studentId}</b>\n<i>Ng√†y sinh:</i> <b>${e?.studentDateOfBirth}</b> \n<i>H·∫°ng ƒë√†o t·∫°o:</i> <b>${e?.driverLicenseLevelName}</b> \n<i>M√£ kho√° h·ªçc:</i> <b>${e?.courseId}</b> \n<i>Th·ªùi gian ƒë√†o t·∫°o:</i> <b>${e?.totalTime ? e?.totalTime + " gi·ªù" : ""}</b> \n<i>Qu√£ng ƒë∆∞·ªùng ƒë√†o t·∫°o:</i>  <b>${e?.totalDistance ? e?.totalDistance + " Km" : ""}</b> \n<i>Th·ªùi gian thi·∫øu:</i>  <b>${e?.moreTime ? e?.moreTime + " gi·ªù" : ""}</b> \n<i>Qu√£ng ƒë∆∞·ªùng thi·∫øu:</i>  <b>${e?.moreDistance ? e?.moreDistance + " Km" : ""}</b> \n<i>Ghi ch√∫:</i>  <b>${e?.note || ""}</b>`;
              const pr1 = await ctx.replyWithHTML(row);
              const pr2 = await sleep();
              console.log('check i++', i);
              await Promise.all([pr1, pr2]);
              console.log('check i++', i);
            };
            isFetchingData = true;
            return;
          } else {
            await ctx.reply("D·ªØ li·ªáu tr·ªëng !!!");
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (e) {
        await ctx.reply("Vui l√≤ng th·ª≠ l·∫°i sau !!!");
        isFetchingData = true;
        return;
      }

    })

    bot.command('DAT', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          const name = input.join(" ");
          console.log("name", name);
          if (!name) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          //call api get student info
          let tokenNLTB = ctx?.state?.tokenNLTB;
          const res = await botTelegramService.getInfoStudent(tokenNLTB, name);
          Promise.all([res]);
          console.log('check data', res);
          if (+res?.EC != 0) {
            await ctx.reply('L·ªói l·∫•y token, vui l√≤ng th·ª≠ l·∫°i sau');
            isFetchingData = true;
            return;
          }
          let i = 1;
          if (res.EC == 0 && res.DT?.length > 0) {
            for (const e of res.DT) {
              const row = `<i>STT:</i><code style="color: red;"> <b style="color:red;">${i++}</b></code>\n<i>H·ªç v√† T√™n:</i> <b>${e?.studentName}</b>\n<i>M√£ h·ªçc vi√™n:</i> <b>${e?.studentId}</b>\n<i>Ng√†y sinh:</i> <b>${e?.studentDateOfBirth}</b> \n<i>H·∫°ng ƒë√†o t·∫°o:</i> <b>${e?.driverLicenseLevelName}</b> \n<i>M√£ kho√° h·ªçc:</i> <b>${e?.courseId}</b> \n<i>Th·ªùi gian ƒë√†o t·∫°o:</i> <b>${e?.totalTime ? e?.totalTime + " gi·ªù" : ""}</b> \n<i>Qu√£ng ƒë∆∞·ªùng ƒë√†o t·∫°o:</i>  <b>${e?.totalDistance ? e?.totalDistance + " Km" : ""}</b> \n<i>Th·ªùi gian thi·∫øu:</i>  <b>${e?.moreTime ? e?.moreTime + " gi·ªù" : ""}</b> \n<i>Qu√£ng ƒë∆∞·ªùng thi·∫øu:</i>  <b>${e?.moreDistance ? e?.moreDistance + " Km" : ""}</b> \n<i>Ghi ch√∫:</i>  <b>${e?.note || ""}</b>`;
              const pr1 = await ctx.replyWithHTML(row);
              const pr2 = await sleep();
              console.log('check i++', i);
              await Promise.all([pr1, pr2]);
              console.log('check i++', i);
            };
            isFetchingData = true;
            return;
          } else {
            await ctx.reply("D·ªØ li·ªáu tr·ªëng !!!");
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (e) {
        await ctx.reply("Vui l√≤ng th·ª≠ l·∫°i sau !!!");
        isFetchingData = true;
        return;
      }

    })


    bot.command('phien', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          const name = input.join(" ");
          console.log("name", name);
          if (!name) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          //call api get student info
          let tokenNLTB = ctx?.state?.tokenNLTB;
          const res = await botTelegramService.getSessionStudent(tokenNLTB, name);
          Promise.all([res]);
          console.log('check data PHIEN', res);
          let i = 1;
          if (+res?.EC != 0) {
            await ctx.reply('L·ªói l·∫•y token, vui l√≤ng th·ª≠ l·∫°i sau');
            isFetchingData = true;
            return;
          }
          if (res.EC == 0 && res.DT.length > 0) {
            for (const e of res.DT) {
              const startTime = e?.startTime ? moment(e?.startTime).utcOffset('+0700').format('DD/MM/YYYY HH:mm:ss') : "";
              const endTime = e?.endTime ? moment(e?.endTime).utcOffset('+0700').format('DD/MM/YYYY HH:mm:ss') : "";

              const row = `<i>STT Phi√™n:</i><code style="color: red;"> <b style="color:red;">${i++}</b></code>\n<i>H·ªç v√† T√™n:</i> <b>${e?.studentName}</b>\n<i>M√£ h·ªçc vi√™n:</i> <b>${e?.studentId}</b>\n<i>Th·ªùi gian b·∫Øt ƒë·∫ßu:</i> <b>${startTime}</b>\n<i>Th·ªùi gian k·∫øt th√∫c:</i>  <b>${endTime}</b>\n<i>Th·ªùi gian:</i>  <b>${e?.totalTime ? e?.totalTime + " gi·ªù" : ""}</b>\n<i>Qu√£ng ƒë∆∞·ªùng:</i>  <b>${e?.totalDistance ? e?.totalDistance + " Km" : ""}</b>`;

              const pr1 = await ctx.replyWithHTML(row);
              const pr2 = await sleep();
              console.log('check i++', i)
              await Promise.all([pr1, pr2]);
            };
            isFetchingData = true;z
            return;
          } else {
            await ctx.reply("D·ªØ li·ªáu tr·ªëng !!!");
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (e) {
        await ctx.reply("Vui l√≤ng th·ª≠ l·∫°i sau !!!");
        isFetchingData = true;
        return;
      }

    })

    bot.command('PHIEN', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          const name = input.join(" ");
          console.log("name", name);
          if (!name) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          //call api get student info
          let tokenNLTB = ctx?.state?.tokenNLTB;
          const res = await botTelegramService.getSessionStudent(tokenNLTB, name);
          Promise.all([res]);
          console.log('check data PHIEN', res);
          let i = 1;
          if (+res?.EC != 0) {
            await ctx.reply('L·ªói l·∫•y token, vui l√≤ng th·ª≠ l·∫°i sau');
            isFetchingData = true;
            return;
          }
          if (res.EC == 0 && res.DT.length > 0) {
            for (const e of res.DT) {
              const row = `<i>STT Phi√™n:</i><code style="color: red;"> <b style="color:red;">${i++}</b></code>\n<i>H·ªç v√† T√™n:</i> <b>${e?.studentName}</b>\n<i>M√£ h·ªçc vi√™n:</i> <b>${e?.studentId}</b>\n<i>Th·ªùi gian b·∫Øt ƒë·∫ßu:</i> <b>${e?.startTime ? e?.startTime.toString().slice(0, 16) + "Z" : ""}</b>\n<i>Th·ªùi gian k·∫øt th√∫c:</i>  <b>${e?.endTime ? e?.endTime.toString().slice(0, 16) + "Z" : ""}</b>\n<i>Th·ªùi gian:</i>  <b>${e?.totalTime ? e?.totalTime + " gi·ªù" : ""}</b>\n<i>Qu√£ng ƒë∆∞·ªùng:</i>  <b>${e?.totalDistance ? e?.totalDistance + " Km" : ""}</b>`;
              const pr1 = await ctx.replyWithHTML(row);
              const pr2 = await sleep();
              console.log('check i++', i);
              await Promise.all([pr1, pr2]);
            };
            isFetchingData = true;
            return;
          } else {
            await ctx.reply("D·ªØ li·ªáu tr·ªëng !!!");
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (e) {
        await ctx.reply("Vui l√≤ng th·ª≠ l·∫°i sau !!!");
        isFetchingData = true;
        return;
      }
    })


    bot.command('matphien', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          console.log('check input', input)
          const mhv = input[0]?.trim();
          console.log("mhv", mhv);
          if (!mhv) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          const regex = /^(?:\d{4}-\d{8}-\d{6}|\d{6})$/;
          if (!regex.test(mhv)) {
            await ctx.reply('Sai ƒë·ªãnh d·∫°ng m√£ h·ªçc vi√™n, vui l√≤ng nh·∫≠p l·∫°i. Vui l√≤ng l·∫•y 6 s·ªë cu·ªëi c·ªßa m√£ h·ªçc vi√™n');
            isFetchingData = true;
            return;
          }
          // call api get student info
          let tokenLocalNLTB = ctx?.state?.tokenLocalNLTB;

          const res = await botTelegramService.checkSession(tokenLocalNLTB, mhv);
          let i = 1;
          if (res?.EC == 0) {
            for (const e of res.DT) {
              let pr1 = {};
              const row = `<i>STT Phi√™n:</i><code style="color: red;"> <b style="color:red;">${i}</b></code>\n<i>H·ªç v√† T√™n:</i> <b>${e?.HoTen}</b>\n<i>M√£ h·ªçc vi√™n:</i> <b>${e?.MaDK}</b>\n<i>Kho√° h·ªçc:</i> <b>${e?.KhoaHoc}</b>\n<i>ƒêƒÉng nh·∫≠p:</i> <b>${e?.DangNhap}</b>\n<i>ƒêƒÉng xu·∫•t:</i> <b>${e?.DangXuat}</b>\n<i>T·ªïng th·ªùi gian:</i> <b>${e?.TongTG}</b>\n<i>T·ªïng qu√£ng ƒë∆∞·ªùng:</i> <b>${e?.TongQD}</b>\n`;
              if (i == 1) {
                if (res.DT.length == 1) {
                  pr1 = await ctx.replyWithHTML(res?.EM + "\n" + row + '\n<i><b>H√£y li√™n h·ªá em Vy. Hy v·ªçng em Vy s·∫Ω c√≠u ƒë∆∞·ª£c phi√™n c·ªßa c√°c th·∫ßy üè©üè©üè©</b></i>');
                } else {
                  pr1 = await ctx.replyWithHTML(res?.EM + "\n" + row);
                }

              } else if (i == res.DT.length) {
                pr1 = await ctx.replyWithHTML(row + '\n<i><b>ƒê√£ ti·∫øn h√†nh gi·∫£i c√≠u, h√£y ki·ªÉm tra l·∫°i. N·∫øu phi√™n kh√¥ng l√™n ƒë∆∞·ª£c t·ªïng c·ª•c th√¨ em h·∫øt c√°ch. üè©üè©üè©</b></i>');
              }
              else {
                pr1 = await ctx.replyWithHTML(row);
              }
              const pr2 = await sleep();
              console.log('check i++', i);
              i++;
              await Promise.all([pr1, pr2]);
            };
            isFetchingData = true;
            return;
          } else {
            await ctx.replyWithHTML(res.EM);
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (error) {
        await ctx.replyWithHTML("Vui l√≤ng th·ª≠ l·∫°i sau");
        isFetchingData = true;
        return;
      }

    })

    bot.command('MATPHIEN', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          console.log('check input', input)
          const mhv = input[0]?.trim();
          console.log("mhv", mhv);
          if (!mhv) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          const regex = /^(?:\d{4}-\d{8}-\d{6}|\d{6})$/;
          if (!regex.test(mhv)) {
            await ctx.reply('Sai ƒë·ªãnh d·∫°ng m√£ h·ªçc vi√™n, vui l√≤ng nh·∫≠p l·∫°i. Vui l√≤ng l·∫•y 6 s·ªë cu·ªëi c·ªßa m√£ h·ªçc vi√™n');
            isFetchingData = true;
            return;
          }
          // call api get student info
          let tokenLocalNLTB = ctx?.state?.tokenLocalNLTB;

          const res = await botTelegramService.checkSession(tokenLocalNLTB, mhv);
          let i = 1;
          if (res?.EC == 0) {
            for (const e of res.DT) {
              let pr1 = {};
              const row = `<i>STT Phi√™n:</i><code style="color: red;"> <b style="color:red;">${i}</b></code>\n<i>H·ªç v√† T√™n:</i> <b>${e?.HoTen}</b>\n<i>M√£ h·ªçc vi√™n:</i> <b>${e?.MaDK}</b>\n<i>Kho√° h·ªçc:</i> <b>${e?.KhoaHoc}</b>\n<i>ƒêƒÉng nh·∫≠p:</i> <b>${e?.DangNhap}</b>\n<i>ƒêƒÉng xu·∫•t:</i> <b>${e?.DangXuat}</b>\n<i>T·ªïng th·ªùi gian:</i> <b>${e?.TongTG}</b>\n<i>T·ªïng qu√£ng ƒë∆∞·ªùng:</i> <b>${e?.TongQD}</b>\n`;
              if (i == 1) {
                if (res.DT.length == 1) {
                  pr1 = await ctx.replyWithHTML(res?.EM + "\n" + row + '\n<i><b>H√£y li√™n h·ªá em Vy. Hy v·ªçng em Vy s·∫Ω c√≠u ƒë∆∞·ª£c phi√™n c·ªßa c√°c th·∫ßy üè©üè©üè©</b></i>');
                } else {
                  pr1 = await ctx.replyWithHTML(res?.EM + "\n" + row);
                }

              } else if (i == res.DT.length) {
                pr1 = await ctx.replyWithHTML(row + '\n<i><b>ƒê√£ ti·∫øn h√†nh gi·∫£i c√≠u, h√£y ki·ªÉm tra l·∫°i. N·∫øu phi√™n kh√¥ng l√™n ƒë∆∞·ª£c t·ªïng c·ª•c th√¨ em h·∫øt c√°ch. üè©üè©üè©</b></i>');
              }
              else {
                pr1 = await ctx.replyWithHTML(row);
              }
              const pr2 = await sleep();
              console.log('check i++', i);
              i++;
              await Promise.all([pr1, pr2]);
            };
            isFetchingData = true;
            return;
          } else {
            await ctx.replyWithHTML(res.EM);
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (error) {
        await ctx.replyWithHTML("Vui l√≤ng th·ª≠ l·∫°i sau");
        isFetchingData = true;
        return;
      }

    })


    bot.command('indat', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          console.log('check input', input)
          const biensoxe = input[0]?.trim();
          const soThang = input[1]?.trim();
          console.log("biensoxe", biensoxe);
          console.log("soThang", soThang);

          if (!biensoxe || !isNumberString(soThang)) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          // call api get student info
          let tokenLocalNLTB = ctx?.state?.tokenLocalNLTB;

          const res = await botTelegramService.inDat(tokenLocalNLTB, biensoxe.replace(/[^a-zA-Z0-9]/g, '').toUpperCase(), soThang?.trim());
          Promise.all([res]);
          console.log('check res', res);
          if (res?.EC == 0) {
            const pdfFilePath = res.DT;
            const pdfBuffer = fs.readFileSync(pdfFilePath);;
            if (fs.existsSync(pdfFilePath)) {
              console.log("file t·ªìn t·∫°i")
              await ctx.replyWithDocument({ source: pdfBuffer, filename: 'inDat.pdf' }, { chat_id: ctx.chat.id }); // G·ª≠i n·ªôi dung PDF l√™n group
              fs.unlink(pdfFilePath, (err) => {
                if (err) {
                  console.error(err);
                  return;
                }
                console.log('File deleted successfully');
              });

              isFetchingData = true;
              return;
            } else {
              console.log("file KH√¥ng t·ªìn t·∫°i")
              ctx.reply("File kh√¥ng t·ªìn t·∫°i");
              isFetchingData = true;
              return;
            }
          } else {
            await ctx.replyWithHTML(res?.EM);
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (error) {
        console.log("check error", error)
        await ctx.replyWithHTML("Vui l√≤ng th·ª≠ l·∫°i sau");
        isFetchingData = true;
        return;
      }

    })

    bot.command('INDAT', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          console.log('check input', input)
          const biensoxe = input[0]?.trim();
          const soThang = input[1]?.trim();
          console.log("biensoxe", biensoxe);
          console.log("soThang", soThang);

          if (!biensoxe || !isNumberString(soThang)) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          // call api get student info
          let tokenLocalNLTB = ctx?.state?.tokenLocalNLTB;

          const res = await botTelegramService.inDat(tokenLocalNLTB, biensoxe.replace(/[^a-zA-Z0-9]/g, '').toUpperCase(), soThang?.trim());
          Promise.all([res]);
          console.log('check res', res);
          if (res?.EC == 0) {
            const pdfFilePath = res.DT;
            const pdfBuffer = fs.readFileSync(pdfFilePath);;
            if (fs.existsSync(pdfFilePath)) {
              console.log("file t·ªìn t·∫°i")
              await ctx.replyWithDocument({ source: pdfBuffer, filename: 'inDat.pdf' }, { chat_id: ctx.chat.id }); // G·ª≠i n·ªôi dung PDF l√™n group
              fs.unlink(pdfFilePath, (err) => {
                if (err) {
                  console.error(err);
                  return;
                }
                console.log('File deleted successfully');
              });

              isFetchingData = true;
              return;
            } else {
              console.log("file KH√¥ng t·ªìn t·∫°i")
              ctx.reply("File kh√¥ng t·ªìn t·∫°i");
              isFetchingData = true;
              return;
            }
          } else {
            await ctx.replyWithHTML(res?.EM);
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (error) {
        console.log("check error", error)
        await ctx.replyWithHTML("Vui l√≤ng th·ª≠ l·∫°i sau");
        isFetchingData = true;
        return;
      }

    })

    bot.command('daykhoa', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          // if (ctx.chat.id != process.env.id_admin) {
          //   await ctx.reply("Ch·ªâ c√≥ admin m·ªõi ƒë∆∞·ª£c ph√©p d√πng t√≠nh nƒÉng n√†y, vui l√≤ng nh·∫Øn tin ri√™ng cho admin ƒë·ªÉ x√°c nh·∫≠n");
          //   isFetchingData = true;
          //   return;
          // }
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          console.log('check input', input)
          const khoa = input[0]?.trim();
          const biensoxe = input[1]?.trim();
          console.log("khoa", khoa);
          console.log("biensoxe", biensoxe);

          if (!khoa || !biensoxe) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          // call api get student info
          let tokenLocalNLTB = ctx?.state?.tokenLocalNLTB;
          const res = await botTelegramService.pushSource(tokenLocalNLTB, khoa, biensoxe.replace(/[^a-zA-Z0-9]/g, '').toUpperCase());
          Promise.all([res]);
          console.log('check res', res);
          if (res?.EC == 0) {
            ctx.replyWithHTML(res.EM);
            isFetchingData = true;
            return;
          } else {
            await ctx.replyWithHTML(res?.EM);
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (error) {
        console.log("check error", error)
        await ctx.replyWithHTML("Vui l√≤ng th·ª≠ l·∫°i sau");
        isFetchingData = true;
        return;
      }

    })

    bot.command('DAYKHOA', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          console.log('check input', input)
          const khoa = input[0]?.trim();
          const biensoxe = input[1]?.trim();
          console.log("khoa", khoa);
          console.log("biensoxe", biensoxe);

          if (!khoa || !biensoxe) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          // call api get student info
          let tokenLocalNLTB = ctx?.state?.tokenLocalNLTB;
          const res = await botTelegramService.pushSource(tokenLocalNLTB, khoa, biensoxe.replace(/[^a-zA-Z0-9]/g, '').toUpperCase());
          Promise.all([res]);
          console.log('check res', res);
          if (res?.EC == 0) {
            ctx.replyWithHTML(res.EM);
            isFetchingData = true;
            return;
          } else {
            await ctx.replyWithHTML(res?.EM);
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (error) {
        console.log("check error", error)
        await ctx.replyWithHTML("Vui l√≤ng th·ª≠ l·∫°i sau");
        isFetchingData = true;
        return;
      }
    })

    bot.command('timkhoa', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          console.log('check input', input)
          const khoa = input[0]?.trim();
          console.log("khoa", khoa);
          if (!khoa) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          // call api get student info
          let tokenLocalNLTB = ctx?.state?.tokenLocalNLTB;
          const res = await botTelegramService.searchSource(tokenLocalNLTB, khoa);
          Promise.all([res]);
          console.log('check res', res);
          if (res?.EC == 0) {

            ctx.replyWithHTML(res.EM);
            isFetchingData = true;
            return;
          } else {
            await ctx.replyWithHTML(res?.EM);
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (error) {
        console.log("check error", error)
        await ctx.replyWithHTML("Vui l√≤ng th·ª≠ l·∫°i sau");
        isFetchingData = true;
        return;
      }

    })

    bot.command('TIMKHOA', async (ctx) => {
      try {
        if (isFetchingData) {
          isFetchingData = false;
          console.log("DAT detected", ctx);
          let input = ctx.message.text.split(" ");
          input.shift();
          console.log('check input', input)
          const khoa = input[0]?.trim();
          console.log("khoa", khoa);
          if (!khoa) {
            await ctx.reply(helpMessage);
            isFetchingData = true;
            return;
          }
          // call api get student info
          let tokenLocalNLTB = ctx?.state?.tokenLocalNLTB;
          const res = await botTelegramService.searchSource(tokenLocalNLTB, khoa);
          Promise.all([res]);
          console.log('check res', res);
          if (res?.EC == 0) {

            ctx.replyWithHTML(res.EM);
            isFetchingData = true;
            return;
          } else {
            await ctx.replyWithHTML(res?.EM);
            isFetchingData = true;
            return;
          }
        }
        isFetchingData = true;
        return;
      } catch (error) {
        console.log("check error", error)
        await ctx.replyWithHTML("Vui l√≤ng th·ª≠ l·∫°i sau");
        isFetchingData = true;
        return;
      }

    })

    bot.hears("phi√™n", (ctx) => {
      // Send response message
      if (isFetchingData) {
        isFetchingData = false;
        ctx.reply(helpMessage)
        isFetchingData = true;
      }
    })
    bot.hears("/phi√™n", (ctx) => {
      // Send response message
      if (isFetchingData) {
        isFetchingData = false;
        ctx.reply(helpMessage)
        isFetchingData = true;
      }
    })

  } catch (e) {
    // G·ª≠i m·ªôt tin nh·∫Øn
    bot.telegram.sendMessage(process.env.id_groupNLTB, 'L·ªói nghi√™m tr·ªçng, vui l√≤ng ƒë·ª£i trong gi√¢y l√°t')
      .then(() => {
        console.log('ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng');
      })
      .catch((error) => {
        console.log('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
      });
    isFetchingData = true;
  }

  bot.launch();

  // Enable graceful stop
  process.once('SIGINT', () => bot.stop('SIGINT'));
  process.once('SIGTERM', () => bot.stop('SIGTERM'));
}
export default botTelegram;

